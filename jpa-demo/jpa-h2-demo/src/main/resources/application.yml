swagger.enable: true
spring.mvc.pathmatch.matching-strategy: ant_path_matcher
app.api.url: http://172.6.207.61:11300
app.api.version: 1.0

spring.datasource.driver-class-name: org.h2.Driver
    # h2 内存数据库 内存模式连接配置 库名: mybatis
spring.datasource.url: jdbc:h2:mem:mybatis
    # 初始化数据表 DDL
spring.datasource.schema: classpath:sql/init.sql
    #  初始化数据 DML
spring.datasource.data: classpath:sql/data.sql
spring.datasource.type: com.alibaba.druid.pool.DruidDataSource

spring.h2.console.enabled: true
spring.h2.console.settings.trace: true
spring.h2.console.settings.web-allow-others: true
spring.h2.console.path: /h2-console

spring.jpa.database-platform: org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto: update

#spring.druid.filter.stat.enable: true
#spring.datasource.druid.web-stat-filter.enabled: true
#spring.datasource.druid.web-stat-filter.url-pattern: /*
#spring.druid.stat-view-servlet.enabled: true
#spring.druid.stat-view-servlet.url-pattern: /druid/*

spring:
  datasource:
    # 连接池配置
    druid:
      # 配置初始化大小、最小、最大
      initial-size: 5
      min-idle: 10
      max-active: 20
      # 配置获取连接等待超时的时间（单位：毫秒）
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空箱连接，单位是毫秒
      time-between-eviction-runs-millis: 200
      # 配置一个连接在池中最小生存的世界，单位是毫秒
      min-evictable-idle-time-millis: 600000
      max-evictable-idle-time-millis: 900000
      # 用来测试连接是否可用的SQL语句，默认值每种数据库都不相同，这是 mysql
      validation-query: select 1
      # 应用向连接池申请连接，并且 testOnBorrow 为false时，连接池将会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用
      test-while-idle: true
      # 如果为 true，默认是false，应用向连接池申请连接时，连接池会判断这条连接是否是可用的
      test-on-borrow: false
      # 如果为 true（默认 false），当应用使用完连接，连接池回收连接的时候会判断改连接是否还可用
      test-on-return: false
      # 是否缓存 preparedStatement，也就是 PSCache。PSCache对支持游标的数据库性能提升巨大，比如 oracle
      pool-prepared-statements: true
      # 要启用 PSCache，必须配置大于0，当大于0时，poolPreparedStatements 自动触发修改为 true，
      # 在 Druid 中，不会存在 Oracle下 PSCache 占用内存过多的问题，可以吧这个数值配置大一些，比如说 100
      max-open-prepared-statements: 20
      # 连接池中的 minIdle 数量以内的连接，空闲时间超过 minEVictableIdleTimeMillis，则会执行 keepAlive 操作
      keep-alive: true
      # Spring 监控，利用 aop 对指定接口的执行时间，jdbc数进行记录
      aop-patterns: "com.ninaco.xms.dao.*"
      ## 启用内置过滤器（第一个 stat 必须，否则监控不到 SQL）
      filters: stat,wall,log4j2
      # 自己配置监控统计拦截的 filter
      filter:
        # 开启 druiddatasource 的状态监控
        stat:
          enabled: true
          db-type: h2
          # 开启慢 sql 监控，超过 2s 就认为是 慢 sql，记录到日志中
          log-slow-sql: true
          slow-sql-millis: 2000
        # 日志监控，使用 slf4j2 进行日志输出
        slf4j:
          enabled: true
          statement-log-error-enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
      ## 配置 WebStatFilter，用于采集 web 关联监控的数据
      web-stat-filter:
        # 启动 StatFilter
        enabled: true
        # 过滤所有 url
        url-pattern: /*
        # 排除一些不必要的url
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        # 开启 session 统计功能
        session-stat-enable: true
        # session 的最大个数，默认100
        session-stat-max-count: 1000
      ## 配置 StatViewServlet（监控页面），用于展示 Druid 的统计信息
      stat-view-servlet:
        # 启用 StatViewServlet
        enabled: true
        # 访问内置监控页面的路径，内置监控页面的首页是 /druid/index.html
        url-pattern: /druid/*
        # 不允许清空统计数据，重新计算
        reset-enable: false
        # 配置监控页面访问用户和密码
        login-username: root
        login-password: 123
        # 允许访问的地址，如果 allow 没有配置或者为空，则允许所有访问
        allow: 127.0.0.1
        # 拒绝访问的地址，deny优先于 allow，如果在 deny 列表中，就算在 allow 列表中，也会被拒绝
        deny:
